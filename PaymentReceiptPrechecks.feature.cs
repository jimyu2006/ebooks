// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Cashbook.Web.UnitTests.SpecFlow.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PaymentReceiptPrechecksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PaymentReceiptPrechecks.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Payment/Receipt prechecks", "Validate payment/receipt transaction to ensure the data is complete and correct", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Payment/Receipt prechecks")))
            {
                Cashbook.Web.UnitTests.SpecFlow.Features.PaymentReceiptPrechecksFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "Description",
                        "CashbookStartDate"});
            table1.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid book 1",
                        "01/01/2013"});
#line 5
testRunner.Given("I have a book with the following parameters", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "LockoffDate"});
            table2.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        ""});
#line 8
testRunner.And("the book has the following settings", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "Key",
                        "Value"});
            table3.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "56",
                        "Recon One"});
            table3.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "80",
                        "d MMMM yyyy"});
            table3.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "75",
                        "{0:$#,0.00;-$#,0.00;$0.00}"});
            table3.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "28",
                        "Tax"});
            table3.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "29",
                        "tax"});
#line 11
testRunner.And("the book has the following country specific values", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxGroupID",
                        "CashbookID",
                        "GroupCode",
                        "Description",
                        "TaxAgentyID",
                        "IsEnabled"});
            table4.AddRow(new string[] {
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "GST",
                        "GST on sales",
                        "40D387C4-4C39-4558-BB44-A233FC7EE521",
                        "true"});
            table4.AddRow(new string[] {
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "FRE",
                        "GST free sales",
                        "40D387C4-4C39-4558-BB44-A233FC7EE521",
                        "true"});
#line 18
testRunner.And("the book has the following tax groups", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxGroupID",
                        "CashbookID",
                        "GroupCode",
                        "Description",
                        "TaxAgentyID",
                        "IsEnabled"});
            table5.AddRow(new string[] {
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "GST",
                        "GST on sales",
                        "40D387C4-4C39-4558-BB44-A233FC7EE521",
                        "true"});
#line 22
testRunner.And("the tax group is selected from all tax goups", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCodeID",
                        "Code",
                        "LongDescription",
                        "TaxAgencyID",
                        "AppliesToReceipts",
                        "AppliesToPayments",
                        "TaxTypeID"});
            table6.AddRow(new string[] {
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "GST",
                        "GST on sales",
                        "e306bff6-adee-4af0-94c2-74bb487269d1",
                        "true",
                        "true",
                        "454cdb9d-e7a6-45ea-9389-b1dc4771274b"});
#line 25
testRunner.And("the tax group has the following tax codes", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxRateID",
                        "TaxCodeID",
                        "Rate",
                        "DateFrom",
                        "DateTo",
                        "IsWholeAmountTax"});
            table7.AddRow(new string[] {
                        "92be1cc0-8885-4375-ba5d-56730cb5a307",
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "10.00000",
                        "01/01/2014",
                        "01/01/2090",
                        "false"});
#line 28
testRunner.And("the tax code has the following tax rates", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "TaxAgencyID",
                        "AccountingMethod",
                        "CanUserChangeAmountTaxStatus",
                        "DefaultAmountTaxStatus",
                        "IsTaxAmountEditable",
                        "TaxGroupID",
                        "ReportLocationTypes",
                        "SalesFiguresCollection"});
            table8.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "7818e1d6-4d8d-4206-8150-484d3fceaf81",
                        "2",
                        "false",
                        "2",
                        "false",
                        "6ce6ae1b-a7eb-428b-a048-52e3ebc4d915",
                        "",
                        ""});
#line 31
testRunner.And("the book has the following tax preferences", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountingCategoryID",
                        "CashbookID",
                        "CategoryName",
                        "IsDebit",
                        "TaxGroupID",
                        "AccountType",
                        "SystemCategory",
                        "Status",
                        "AccountCode",
                        "SortOrder"});
            table9.AddRow(new string[] {
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Income",
                        "false",
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "1",
                        "0",
                        "1",
                        "4-0000",
                        "1"});
            table9.AddRow(new string[] {
                        "38b12f47-5a48-4a16-83fa-bc7ece473ad9",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Espense",
                        "true",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "2",
                        "0",
                        "1",
                        "5-0000",
                        "2"});
            table9.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Accounts receivable",
                        "true",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "10",
                        "0",
                        "1",
                        "6-0000",
                        "4"});
            table9.AddRow(new string[] {
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Accounts payable",
                        "false",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "15",
                        "0",
                        "1",
                        "7-0000",
                        "5"});
            table9.AddRow(new string[] {
                        "7ac60c86-a88f-44d6-be6e-bf05b19b8b40",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Sales",
                        "false",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "1",
                        "0",
                        "1",
                        "8-0000",
                        "6"});
            table9.AddRow(new string[] {
                        "032f91f9-653c-4908-94b4-b74a94c693f5",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Printing & Stationery",
                        "true",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "2",
                        "0",
                        "1",
                        "9-0000",
                        "7"});
#line 34
testRunner.And("the book has the following accounts", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountingCategoryID",
                        "CashbookID",
                        "CategoryName",
                        "IsDebit",
                        "TaxGroupID",
                        "AccountType",
                        "SystemCategory",
                        "Status",
                        "AccountCode",
                        "SortOrder"});
            table10.AddRow(new string[] {
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Income",
                        "false",
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "1",
                        "0",
                        "1",
                        "4-0000",
                        "1"});
#line 42
testRunner.And("the account is selected from all accounts", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "BankAccountID",
                        "CashbookID",
                        "Description",
                        "DateFrom",
                        "LockoffDate"});
            table11.AddRow(new string[] {
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid bank account 1",
                        "01/01/2013",
                        ""});
            table11.AddRow(new string[] {
                        "36ca0a1c-5d67-4c68-ae69-a07c5c6663c8",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid bank account 2",
                        "11/11/2014",
                        ""});
#line 45
testRunner.And("the book has the following bank accounts", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "BankAccountID",
                        "CashbookID",
                        "Description",
                        "DateFrom",
                        "LockoffDate"});
            table12.AddRow(new string[] {
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid bank account 1",
                        "01/01/2013",
                        ""});
#line 49
testRunner.And("the bank account is selected from all book bank accounts", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table13.AddRow(new string[] {
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer 1",
                        "1",
                        "1",
                        "true",
                        "false",
                        "true",
                        "true"});
            table13.AddRow(new string[] {
                        "cb42b737-e01b-4fcf-91ca-5fcb0c3d79f9",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid supplier 1",
                        "1",
                        "1",
                        "false",
                        "true",
                        "false",
                        "true"});
            table13.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 52
testRunner.And("the book has the following contacts", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table14.AddRow(new string[] {
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer 1",
                        "1",
                        "1",
                        "true",
                        "false",
                        "true",
                        "true"});
#line 57
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ChargeableItemID",
                        "CashbookID",
                        "ItemType",
                        "ItemName",
                        "ItemCode",
                        "PurchasePrice",
                        "PurchaseCategoryID",
                        "PurchaseDescription",
                        "SalePrice",
                        "SaleCategoryID",
                        "SaleDescription",
                        "ActiveStatus",
                        "IsTaxInclusive",
                        "PurchaseTaxGroupID",
                        "SaleTaxGroupID",
                        "SalePriceAccuracy",
                        "PurchasePriceAccuracy",
                        "SalePriceIsTaxInclusive",
                        "PurchasedSold"});
            table15.AddRow(new string[] {
                        "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "1",
                        "Product item",
                        "PI1",
                        "5.0000000000",
                        "032f91f9-653c-4908-94b4-b74a94c693f5",
                        "",
                        "10.0000000000",
                        "7ac60c86-a88f-44d6-be6e-bf05b19b8b40",
                        "",
                        "1",
                        "1",
                        "",
                        "",
                        "2",
                        "2",
                        "true",
                        "1"});
            table15.AddRow(new string[] {
                        "bfa9d56b-03fa-41bd-8e58-7a3b72da91a0",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "1",
                        "Receipt item",
                        "",
                        "50.0000000000",
                        "032f91f9-653c-4908-94b4-b74a94c693f5",
                        "",
                        "50.0000000000",
                        "7ac60c86-a88f-44d6-be6e-bf05b19b8b40",
                        "",
                        "1",
                        "1",
                        "110832b8-9d2a-4145-8295-d2be5bb0d555",
                        "",
                        "2",
                        "2",
                        "true",
                        "2"});
#line 60
testRunner.And("the book has the following chargeable items", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ChargeableItemID",
                        "CashbookID",
                        "ItemType",
                        "ItemName",
                        "ItemCode",
                        "PurchasePrice",
                        "PurchaseCategoryID",
                        "PurchaseDescription",
                        "SalePrice",
                        "SaleCategoryID",
                        "SaleDescription",
                        "ActiveStatus",
                        "IsTaxInclusive",
                        "PurchaseTaxGroupID",
                        "SaleTaxGroupID",
                        "SalePriceAccuracy",
                        "PurchasePriceAccuracy",
                        "SalePriceIsTaxInclusive",
                        "PurchasedSold"});
            table16.AddRow(new string[] {
                        "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "1",
                        "Product item",
                        "PI1",
                        "5.0000000000",
                        "032f91f9-653c-4908-94b4-b74a94c693f5",
                        "",
                        "10.0000000000",
                        "7ac60c86-a88f-44d6-be6e-bf05b19b8b40",
                        "",
                        "1",
                        "1",
                        "",
                        "",
                        "2",
                        "2",
                        "true",
                        "3"});
#line 64
testRunner.And("the chargeable item is selected from all chargeable items", ((string)(null)), table16, "And ");
#line hidden
        }
        
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt(string cashbookID, string paymentsReceiptsID, string customerSupplierID, string bankAccountID, string transDate, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check all mandatory fields have been completed for the single payment/receipt", @__tags);
#line 69
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table17.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "false",
                        "100.00",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 70
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table17, "Given ");
#line 73
testRunner.And(string.Format("this payment has book ID \'{0}\'", cashbookID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
testRunner.And(string.Format("this payment has payment ID \'{0}\'", paymentsReceiptsID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
testRunner.And(string.Format("this payment has contact ID \'{0}\'", customerSupplierID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
testRunner.And(string.Format("this payment has bank account ID \'{0}\'", bankAccountID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
testRunner.And(string.Format("this payment has transaction date \'{0}\'", transDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "1")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant0()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("", "78efe31b-2afe-4899-bc87-6a27151994d7", "434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "01/01/2014", "1", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "f50ee246-10b6-49c2-916f-cb54396a039a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "2")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant1()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("f50ee246-10b6-49c2-916f-cb54396a039a", "", "434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "01/01/2014", "2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "f50ee246-10b6-49c2-916f-cb54396a039a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "3")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant2()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("f50ee246-10b6-49c2-916f-cb54396a039a", "78efe31b-2afe-4899-bc87-6a27151994d7", "", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "01/01/2014", "3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "f50ee246-10b6-49c2-916f-cb54396a039a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "4")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant3()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("f50ee246-10b6-49c2-916f-cb54396a039a", "78efe31b-2afe-4899-bc87-6a27151994d7", "434e0d0a-2511-4552-8061-b5388e040438", "", "01/01/2014", "4", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "f50ee246-10b6-49c2-916f-cb54396a039a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "5")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant4()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("f50ee246-10b6-49c2-916f-cb54396a039a", "78efe31b-2afe-4899-bc87-6a27151994d7", "434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "", "5", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check all mandatory fields have been completed for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CashbookID", "f50ee246-10b6-49c2-916f-cb54396a039a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt_Variant5()
        {
            this.CheckAllMandatoryFieldsHaveBeenCompletedForTheSinglePaymentReceipt("f50ee246-10b6-49c2-916f-cb54396a039a", "78efe31b-2afe-4899-bc87-6a27151994d7", "434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "01/01/2014", "0", ((string[])(null)));
        }
        
        public virtual void CheckAPaymentBankAccountAndContactExistForTheBook(string customerSupplierID, string bankAccountID, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test2"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check a payment bank account and contact exist for the book", @__tags);
#line 90
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table18.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "",
                        "",
                        "01/01/2014",
                        "false",
                        "100.00",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 91
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table18, "Given ");
#line 94
testRunner.And(string.Format("this payment has contact ID \'{0}\'", customerSupplierID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
testRunner.And(string.Format("this payment has bank account ID \'{0}\'", bankAccountID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a payment bank account and contact exist for the book")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "054f5a94-fa96-4121-9de5-e320c7605df4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "6")]
        public virtual void CheckAPaymentBankAccountAndContactExistForTheBook_Variant0()
        {
            this.CheckAPaymentBankAccountAndContactExistForTheBook("434e0d0a-2511-4552-8061-b5388e040438", "054f5a94-fa96-4121-9de5-e320c7605df4", "6", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a payment bank account and contact exist for the book")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAPaymentBankAccountAndContactExistForTheBook_Variant1()
        {
            this.CheckAPaymentBankAccountAndContactExistForTheBook("434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a payment bank account and contact exist for the book")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "dd096d5b-b9ca-4089-afea-454dccc8d6e8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "7")]
        public virtual void CheckAPaymentBankAccountAndContactExistForTheBook_Variant2()
        {
            this.CheckAPaymentBankAccountAndContactExistForTheBook("dd096d5b-b9ca-4089-afea-454dccc8d6e8", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "7", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a payment bank account and contact exist for the book")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CustomerSupplierID", "434e0d0a-2511-4552-8061-b5388e040438")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountID", "b62b3ec8-d707-48f4-aa06-109c86e1d973")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAPaymentBankAccountAndContactExistForTheBook_Variant3()
        {
            this.CheckAPaymentBankAccountAndContactExistForTheBook("434e0d0a-2511-4552-8061-b5388e040438", "b62b3ec8-d707-48f4-aa06-109c86e1d973", "0", ((string[])(null)));
        }
        
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange(string transDate, string bookStartDate, string bookLockoffDate, string bankAccountStartDate, string bankAccountEndDate, string bankAccountLockoffDate, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check payment or receipt trasaction date is within a date range", @__tags);
#line 106
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table19.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "",
                        "false",
                        "100.00",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 107
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table19, "Given ");
#line 110
testRunner.And(string.Format("this payment has transaction date \'{0}\'", transDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
testRunner.And(string.Format("the book start date \'{0}\'", bookStartDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
testRunner.And(string.Format("the book lockoff date \'{0}\'", bookLockoffDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
testRunner.And(string.Format("the bank account start date \'{0}\'", bankAccountStartDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
testRunner.And(string.Format("the bank account end date \'{0}\'", bankAccountEndDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
testRunner.And(string.Format("the bank account lockoff date \'{0}\'", bankAccountLockoffDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant0()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("01/01/2014", "01/01/2013", "", "01/01/2013", "01/01/9999", "", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "02/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "63")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant1()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("02/01/2014", "03/01/2014", "", "03/01/2014", "01/01/9999", "", "63", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "Today + 400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "65")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant2()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("Today + 400", "01/01/2013", "", "01/01/2013", "01/01/9999", "", "65", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "Today")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant3()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("Today", "01/01/2013", "", "01/01/2013", "01/01/9999", "", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "64")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant4()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("03/01/2014", "01/01/2013", "03/01/2014", "01/01/2013", "01/01/9999", "", "64", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "02/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "64")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant5()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("02/01/2014", "01/01/2013", "03/01/2014", "01/01/2013", "01/01/9999", "", "64", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "04/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "03/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant6()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("04/01/2014", "01/01/2013", "03/01/2014", "01/01/2013", "01/01/9999", "", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "05/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "06/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "18")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant7()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("05/01/2014", "01/01/2013", "", "06/01/2014", "01/01/9999", "", "18", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "06/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "05/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "19")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant8()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("06/01/2014", "01/01/2013", "", "01/01/2013", "05/01/2014", "", "19", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "07/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "08/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant9()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("07/01/2014", "01/01/2013", "", "01/01/2013", "08/01/2014", "", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "08/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "09/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "17")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant10()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("08/01/2014", "01/01/2013", "", "01/01/2013", "01/01/9999", "09/01/2014", "17", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "08/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "08/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "17")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant11()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("08/01/2014", "01/01/2013", "", "01/01/2013", "01/01/9999", "08/01/2014", "17", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment or receipt trasaction date is within a date range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "09/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BookLockoffDate", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountStartDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountEndDate", "01/01/9999")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BankAccountLockoffDate", "08/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentOrReceiptTrasactionDateIsWithinADateRange_Variant12()
        {
            this.CheckPaymentOrReceiptTrasactionDateIsWithinADateRange("09/01/2014", "01/01/2013", "", "01/01/2013", "01/01/9999", "08/01/2014", "0", ((string[])(null)));
        }
        
        public virtual void CheckMaxFieldLengthAllowedForPaymentFields(string narration, string details, string reference, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test5"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check max field length allowed for payment fields", @__tags);
#line 135
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table20.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "false",
                        "100.00",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 136
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table20, "Given ");
#line 139
testRunner.And(string.Format("this payment has narration \'{0}\'", narration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
testRunner.And(string.Format("this payment has details \'{0}\'", details), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
testRunner.And(string.Format("this payment has reference \'{0}\'", reference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check max field length allowed for payment fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Narration", @"(Over 400 chars) 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Details", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Reference", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "8")]
        public virtual void CheckMaxFieldLengthAllowedForPaymentFields_Variant0()
        {
            this.CheckMaxFieldLengthAllowedForPaymentFields(@"(Over 400 chars) 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "", "", "8", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check max field length allowed for payment fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Narration", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Details", @"(Over 255 chars) 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Reference", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "9")]
        public virtual void CheckMaxFieldLengthAllowedForPaymentFields_Variant1()
        {
            this.CheckMaxFieldLengthAllowedForPaymentFields("", @"(Over 255 chars) 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "", "9", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check max field length allowed for payment fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Narration", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Details", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Reference", "(Over 200 chars) 1234567890123456789012345678901234567890123456789012345678901234" +
            "56789012345678901234567890123456789012345678901234567890123456789012345678901234" +
            "567890123456789012345678901234567890123456789012345678901234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "10")]
        public virtual void CheckMaxFieldLengthAllowedForPaymentFields_Variant2()
        {
            this.CheckMaxFieldLengthAllowedForPaymentFields("", "", "(Over 200 chars) 1234567890123456789012345678901234567890123456789012345678901234" +
                    "56789012345678901234567890123456789012345678901234567890123456789012345678901234" +
                    "567890123456789012345678901234567890123456789012345678901234567890", "10", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check max field length allowed for payment fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Narration", "1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Details", "1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Reference", "1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckMaxFieldLengthAllowedForPaymentFields_Variant3()
        {
            this.CheckMaxFieldLengthAllowedForPaymentFields("1234567890", "1234567890", "1234567890", "0", ((string[])(null)));
        }
        
        public virtual void CheckAllowedDecimalValuesOfTheSinglePaymentReceipt(string amount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check allowed decimal values of the single payment/receipt", @__tags);
#line 152
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table21.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 153
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table21, "Given ");
#line 156
testRunner.And(string.Format("this payment has amount \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check allowed decimal values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckAllowedDecimalValuesOfTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckAllowedDecimalValuesOfTheSinglePaymentReceipt("922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check allowed decimal values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckAllowedDecimalValuesOfTheSinglePaymentReceipt_0_58079()
        {
            this.CheckAllowedDecimalValuesOfTheSinglePaymentReceipt("0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check allowed decimal values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAllowedDecimalValuesOfTheSinglePaymentReceipt_100_5807()
        {
            this.CheckAllowedDecimalValuesOfTheSinglePaymentReceipt("100.5807", "0", ((string[])(null)));
        }
        
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt(string paymentReceiptAccountingSplitID, string paymentsReceiptsID, string accountingCategoryID, string chargeableItemID, string isTaxApplicable, string taxGroupID, string amount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test7"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check base cash allocation values of the single payment/receipt", @__tags);
#line 166
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table22.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "",
                        "true",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 167
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table23.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "50.55",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 170
testRunner.And("this payment has following cash allocations", ((string)(null)), table23, "And ");
#line 173
testRunner.And(string.Format("this payment has amount \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
testRunner.And(string.Format("the payment amount is \'{0}\'", isTaxApplicable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
testRunner.And(string.Format("this payment has accounting split ID \'{0}\'", paymentReceiptAccountingSplitID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
testRunner.And(string.Format("this payment has accounting split payment ID \'{0}\'", paymentsReceiptsID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
testRunner.And(string.Format("this payment has accounting split accounting category ID \'{0}\'", accountingCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
testRunner.And(string.Format("this payment has accounting split chargeable item ID \'{0}\'", chargeableItemID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
testRunner.And(string.Format("this payment has accounting split tax group ID \'{0}\'", taxGroupID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "1120a991-565e-41b0-8031-0f0eb623a35c")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "12")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant0()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "1120a991-565e-41b0-8031-0f0eb623a35c", "", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "50.00", "12", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "1120a991-565e-41b0-8031-0f0eb623a35c")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "23")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant1()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("", "78efe31b-2afe-4899-bc87-6a27151994d7", "1120a991-565e-41b0-8031-0f0eb623a35c", "", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "23", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "1120a991-565e-41b0-8031-0f0eb623a35c")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "24")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant2()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "", "1120a991-565e-41b0-8031-0f0eb623a35c", "", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "24", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "25")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant3()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "", "", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "25", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "26")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant4()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "", "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "26", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "1120a991-565e-41b0-8031-0f0eb623a35c")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "27")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant5()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "1120a991-565e-41b0-8031-0f0eb623a35c", "", "false", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "27", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "1120a991-565e-41b0-8031-0f0eb623a35c")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "32")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant6()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "1120a991-565e-41b0-8031-0f0eb623a35c", "5a910ec4-5212-4f9a-bcfe-4c68a74f2b2b", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "32", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check base cash allocation values of the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentReceiptAccountingSplitID", "8f466df0-8da6-43ec-b180-1078715240ae")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:PaymentsReceiptsID", "78efe31b-2afe-4899-bc87-6a27151994d7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingCategoryID", "032f91f9-653c-4908-94b4-b74a94c693f5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ChargeableItemID", "bfa9d56b-03fa-41bd-8e58-7a3b72da91a0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroupID", "0a5555c9-1211-4d5b-9a1c-28cb17562c30")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt_Variant7()
        {
            this.CheckBaseCashAllocationValuesOfTheSinglePaymentReceipt("8f466df0-8da6-43ec-b180-1078715240ae", "78efe31b-2afe-4899-bc87-6a27151994d7", "032f91f9-653c-4908-94b4-b74a94c693f5", "bfa9d56b-03fa-41bd-8e58-7a3b72da91a0", "true", "0a5555c9-1211-4d5b-9a1c-28cb17562c30", "100.00", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationQuantityValueForTheSinglePaymentReceipt(string quantity, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test8"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation quantity value for the single payment/receipt", @__tags);
#line 194
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table24.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "100.5807",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 195
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table25.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "100.5807",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 198
testRunner.And("this payment has following cash allocations", ((string)(null)), table25, "And ");
#line 201
testRunner.And(string.Format("this payment line item has quantity \'{0}\'", quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation quantity value for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationQuantityValueForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationQuantityValueForTheSinglePaymentReceipt("922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation quantity value for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationQuantityValueForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationQuantityValueForTheSinglePaymentReceipt("0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation quantity value for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Quantity", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationQuantityValueForTheSinglePaymentReceipt_100_5807()
        {
            this.CheckCashAllocationQuantityValueForTheSinglePaymentReceipt("100.5807", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt(string discountAmount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test9"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation discount amount for the single payment/receipt", @__tags);
#line 211
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table26.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "80",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 212
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table27.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "2.0000",
                        "40",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 215
testRunner.And("this payment has following cash allocations", ((string)(null)), table27, "And ");
#line 218
testRunner.And(string.Format("this payment line item has discount amount  \'{0}\'", discountAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountAmount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt("922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountAmount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt("0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountAmount", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "36")]
        public virtual void CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt_200()
        {
            this.CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt("200", "36", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "80")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountAmount", "80")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt_80()
        {
            this.CheckCashAllocationDiscountAmountForTheSinglePaymentReceipt("80", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt(string discountPercent, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test10"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation discount percentage for the single payment/receipt", @__tags);
#line 229
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table28.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "100",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 230
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table29.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "2.0000",
                        "50",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 233
testRunner.And("this payment has following cash allocations", ((string)(null)), table29, "And ");
#line 236
testRunner.And(string.Format("this payment line item has discount percentage  \'{0}\'", discountPercent), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount percentage for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountPercent", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt("922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount percentage for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountPercent", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt("0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount percentage for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100.5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountPercent", "100.5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "37")]
        public virtual void CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt_100_5()
        {
            this.CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt("100.5", "37", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount percentage for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountPercent", "100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt_100()
        {
            this.CheckCashAllocationDiscountPercentageForTheSinglePaymentReceipt("100", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt(string discountTax, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test11"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation discount tax amount for the single payment/receipt", @__tags);
#line 247
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table30.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 248
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table31.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 251
testRunner.And("this payment has following cash allocations", ((string)(null)), table31, "And ");
#line 254
testRunner.And(string.Format("this payment line item has discount tax amount \'{0}\'", discountTax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount tax amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountTax", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt("922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount tax amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountTax", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt("0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation discount tax amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DiscountTax", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt_100_5807()
        {
            this.CheckCashAllocationDiscountTaxAmountForTheSinglePaymentReceipt("100.5807", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt(string amount, string accountingAmount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test12"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation line item amount for the single payment/receipt", @__tags);
#line 264
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table32.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 265
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table33.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "4",
                        "1"});
#line 268
testRunner.And("this payment has following cash allocations", ((string)(null)), table33, "And ");
#line 271
testRunner.And(string.Format("this payment has amount \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
testRunner.And(string.Format("this payment line item has amount \'{0}\'", accountingAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 274
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt("922337203685477.58079", "922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt("0.58079", "0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt_100_5807()
        {
            this.CheckCashAllocationLineItemAmountForTheSinglePaymentReceipt("100.5807", "100.5807", "0", ((string[])(null)));
        }
        
        public virtual void CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt(string amount, string accountingAmount, string accountingGST, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test13"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check cash allocation line item GST amount for the single payment/receipt", @__tags);
#line 282
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table34.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 283
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table34, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table35.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "4",
                        "1"});
#line 286
testRunner.And("this payment has following cash allocations", ((string)(null)), table35, "And ");
#line 289
testRunner.And(string.Format("this payment has amount \'{0}\'", amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
testRunner.And(string.Format("this payment line item has amount \'{0}\'", accountingAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
testRunner.And(string.Format("this payment line item has GST amount \'{0}\'", accountingGST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item GST amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "922337203685477.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "20")]
        public virtual void CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt_922337203685477_58079()
        {
            this.CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt("922337203685477.58079", "922337203685477.58079", "922337203685477.58079", "20", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item GST amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "0.58079")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "21")]
        public virtual void CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt_0_58079()
        {
            this.CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt("0.58079", "0.58079", "0.58079", "21", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check cash allocation line item GST amount for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "201.16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Amount", "201.16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "100.5807")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt_201_16()
        {
            this.CheckCashAllocationLineItemGSTAmountForTheSinglePaymentReceipt("201.16", "100.5807", "100.5807", "0", ((string[])(null)));
        }
        
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt(string taxGroup, string isEnabled, string transDate, string isWholeAmountTax, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test14"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check tax group used in cash allocation line item for the single payment/receipt", @__tags);
#line 301
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "Amount",
                        "TransDate",
                        "IsPayment",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table36.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "100",
                        "01/01/2014",
                        "false",
                        "true",
                        "",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 302
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table36, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table37.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "100",
                        "",
                        "false",
                        "0a5555c9-1211-4d5b-9a1c-28cb17562c30",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "4",
                        "1"});
#line 305
testRunner.And("this payment has following cash allocations", ((string)(null)), table37, "And ");
#line 308
testRunner.And(string.Format("the payment line item has tax group \'{0}\'", taxGroup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
testRunner.And(string.Format("the tax group is enabled \'{0}\'", isEnabled), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
testRunner.And(string.Format("this payment has transaction date \'{0}\'", transDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
testRunner.And(string.Format("the tax code is set to be as whole tax amount \'{0}\'", isWholeAmountTax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check tax group used in cash allocation line item for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroup", "\'NULL\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsEnabled", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsWholeAmountTax", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "29")]
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt_Variant0()
        {
            this.CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt("\'NULL\'", "", "01/01/2014", "", "29", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check tax group used in cash allocation line item for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroup", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsEnabled", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsWholeAmountTax", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "30")]
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt_Variant1()
        {
            this.CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt("", "false", "01/01/2014", "", "30", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check tax group used in cash allocation line item for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroup", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsEnabled", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2013")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsWholeAmountTax", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "31")]
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt_Variant2()
        {
            this.CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt("", "true", "01/01/2013", "", "31", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check tax group used in cash allocation line item for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroup", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsEnabled", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsWholeAmountTax", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "705")]
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt_Variant3()
        {
            this.CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt("", "true", "01/01/2014", "true", "705", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check tax group used in cash allocation line item for the single payment/receipt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test14")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TaxGroup", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsEnabled", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TransDate", "01/01/2014")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsWholeAmountTax", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt_Variant4()
        {
            this.CheckTaxGroupUsedInCashAllocationLineItemForTheSinglePaymentReceipt("", "true", "01/01/2014", "", "0", ((string[])(null)));
        }
        
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus(string isTaxApplicable, string accountingAmount, string accountingGST, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test15"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check payment/receipt values based on amount tax status", @__tags);
#line 323
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table38.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "500.00",
                        "true",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 324
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table39.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0.0000",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "4",
                        "1"});
#line 327
testRunner.And("this payment has following cash allocations", ((string)(null)), table39, "And ");
#line 330
testRunner.And(string.Format("the payment amount is \'{0}\'", isTaxApplicable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
testRunner.And(string.Format("this payment line item has amount \'{0}\'", accountingAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
testRunner.And(string.Format("this payment line item has GST amount \'{0}\'", accountingGST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "33")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant0()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("false", "450.00", "50.00", "33", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "34")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant1()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("true", "50.00", "450.00", "34", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "-50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "-450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "34")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant2()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("true", "-50.00", "-450.00", "34", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "-50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "35")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant3()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("true", "450.00", "-50.00", "35", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "-450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "35")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant4()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("true", "-450.00", "50.00", "35", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check payment/receipt values based on amount tax status")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsTaxApplicable", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingAmount", "450.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountingGST", "50.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckPaymentReceiptValuesBasedOnAmountTaxStatus_Variant5()
        {
            this.CheckPaymentReceiptValuesBasedOnAmountTaxStatus("true", "450.00", "50.00", "0", ((string[])(null)));
        }
        
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem(string rate, string rateAccuracy, string rateTax, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test16"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check rate and accuracy values for the payment/receipt cash allocation line item", @__tags);
#line 345
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table40.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "500.00",
                        "true",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e"});
#line 346
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table40, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentReceiptAccountingSplitID",
                        "PaymentsReceiptsID",
                        "AccountingCategoryID",
                        "AccountingAmount",
                        "AccountingGST",
                        "GSTManuallyModified",
                        "TaxGroupID",
                        "ProjectID",
                        "ChargeableItemID",
                        "Rate",
                        "Quantity",
                        "DiscountAmount",
                        "DiscountPercent",
                        "RateTax",
                        "DiscountTax",
                        "RateAccuracy",
                        "LineNumber"});
            table41.AddRow(new string[] {
                        "dfe6b303-57e3-4792-9bf9-c804f0b5ff7e",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "1120a991-565e-41b0-8031-0f0eb623a35c",
                        "",
                        "",
                        "false",
                        "",
                        "",
                        "",
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "1"});
#line 349
testRunner.And("this payment has following cash allocations", ((string)(null)), table41, "And ");
#line 352
testRunner.And(string.Format("this payment line item has rate \'{0}\'", rate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
testRunner.And(string.Format("this payment line item has rate accuracy \'{0}\'", rateAccuracy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
testRunner.And(string.Format("this payment line item has rate tax \'{0}\'", rateTax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "1.0000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "1.0000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "700")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant0()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("1.0000", "-1", "1.0000", "700", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "1.0000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "1.0000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "700")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant1()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("1.0000", "11", "1.0000", "700", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "701")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant2()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("0", "10", "0", "701", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "1.12345678909")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "1.0000")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "702")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant3()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("1.12345678909", "10", "1.0000", "702", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "1.1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "1.12345678909")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "703")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant4()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("1.1234567890", "10", "1.12345678909", "703", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check rate and accuracy values for the payment/receipt cash allocation line item")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test16")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Rate", "1.1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateAccuracy", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RateTax", "1.1234567890")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem_Variant5()
        {
            this.CheckRateAndAccuracyValuesForThePaymentReceiptCashAllocationLineItem("1.1234567890", "10", "1.1234567890", "0", ((string[])(null)));
        }
        
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount(string accountsPayableCategoryID, string accountsReceivableCategoryID, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test18"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check whether accounts payable or receivable requred or not for payment transacti" +
                    "on to allocate a creditor amount", @__tags);
#line 367
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table42.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "500.00",
                        "false",
                        "",
                        ""});
#line 368
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table42, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table43.AddRow(new string[] {
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "7",
                        "200.00"});
#line 371
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table44.AddRow(new string[] {
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        "7",
                        "10.00"});
#line 374
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table44, "And ");
#line 377
testRunner.And(string.Format("this payment has accounts payable account \'{0}\'", accountsPayableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
testRunner.And(string.Format("this payment has accounts receivalbe account \'{0}\'", accountsReceivableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 379
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 381
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for payment transacti" +
            "on to allocate a creditor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "45")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount_Variant0()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount("", "", "true", "45", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for payment transacti" +
            "on to allocate a creditor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "48")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount_Variant1()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount("4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "48", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for payment transacti" +
            "on to allocate a creditor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount_Variant2()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForPaymentTransactionToAllocateACreditorAmount("4f171d54-bd94-4438-9240-85c4268f317e", "", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount(string accountsPayableCategoryID, string accountsReceivableCategoryID, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test19"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check whether accounts payable or receivable requred or not for receipt transacti" +
                    "on to allocate a debtor amount", @__tags);
#line 389
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table45.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "false",
                        "500.00",
                        "false",
                        "",
                        ""});
#line 390
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table45, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table46.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "8",
                        "100.00"});
#line 393
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table47.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "2",
                        "10.00"});
#line 396
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table47, "And ");
#line 399
testRunner.And(string.Format("this payment has accounts payable account \'{0}\'", accountsPayableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
testRunner.And(string.Format("this payment has accounts receivalbe account \'{0}\'", accountsReceivableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 402
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 403
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for receipt transacti" +
            "on to allocate a debtor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "46")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount_Variant0()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount("", "", "true", "46", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for receipt transacti" +
            "on to allocate a debtor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "47")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount_Variant1()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount("4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "47", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check whether accounts payable or receivable requred or not for receipt transacti" +
            "on to allocate a debtor amount")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test19")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount_Variant2()
        {
            this.CheckWhetherAccountsPayableOrReceivableRequredOrNotForReceiptTransactionToAllocateADebtorAmount("", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction(string allocationType, string accountsPayableCategoryID, string accountsReceivableCategoryID, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test20"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check creditor amounts are allocated to the same accounts payable account for pay" +
                    "ment transaction", @__tags);
#line 411
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table48.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "434e0d0a-2511-4552-8061-b5388e040438",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "500.00",
                        "false",
                        "",
                        ""});
#line 412
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table48, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table49.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 415
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table50.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "8",
                        "100.00"});
#line 418
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table51.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "2",
                        "10.00"});
#line 421
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table51, "And ");
#line 424
testRunner.And(string.Format("the debtor/creditor allocation type is \'{0}\'", allocationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
testRunner.And(string.Format("this payment has accounts payable account \'{0}\'", accountsPayableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
testRunner.And(string.Format("this payment has accounts receivalbe account \'{0}\'", accountsReceivableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 429
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "51")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant0()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("2", "4f171d54-bd94-4438-9240-85c4268f317e", "", "false", "51", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant1()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("2", "4f171d54-bd94-4438-9240-85c4268f317e", "", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "57")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant2()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("4", "4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "false", "57", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant3()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("4", "4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "50")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant4()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("5", "4f171d54-bd94-4438-9240-85c4268f317e", "", "false", "50", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant5()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("5", "4f171d54-bd94-4438-9240-85c4268f317e", "", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "49")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant6()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("7", "4f171d54-bd94-4438-9240-85c4268f317e", "", "false", "49", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant7()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("7", "4f171d54-bd94-4438-9240-85c4268f317e", "", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "53")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant8()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("9", "4f171d54-bd94-4438-9240-85c4268f317e", "", "false", "53", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check creditor amounts are allocated to the same accounts payable account for pay" +
            "ment transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction_Variant9()
        {
            this.CheckCreditorAmountsAreAllocatedToTheSameAccountsPayableAccountForPaymentTransaction("9", "4f171d54-bd94-4438-9240-85c4268f317e", "", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction(string allocationType, string accountsPayableCategoryID, string accountsReceivableCategoryID, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test21"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check debtor amounts are allocated to the same accounts receivable account for re" +
                    "ceipt transaction", @__tags);
#line 444
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table52.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "false",
                        "500.00",
                        "false",
                        "",
                        ""});
#line 445
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table52, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table53.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 448
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table54.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "8",
                        "100.00"});
#line 451
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table55.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "2",
                        "10.00"});
#line 454
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table55, "And ");
#line 457
testRunner.And(string.Format("the debtor/creditor allocation type is \'{0}\'", allocationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 458
testRunner.And(string.Format("this payment has accounts payable account \'{0}\'", accountsPayableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
testRunner.And(string.Format("this payment has accounts receivalbe account \'{0}\'", accountsReceivableCategoryID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 460
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 461
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 462
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "56")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant0()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("1", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "false", "56", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant1()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("1", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "52")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant2()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("3", "4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "false", "52", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "4f171d54-bd94-4438-9240-85c4268f317e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant3()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("3", "4f171d54-bd94-4438-9240-85c4268f317e", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "55")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant4()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("6", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "false", "55", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant5()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("6", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "54")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant6()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("8", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "false", "54", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check debtor amounts are allocated to the same accounts receivable account for re" +
            "ceipt transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test21")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsPayableCategoryID", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AccountsReceivableCategoryID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction_Variant7()
        {
            this.CheckDebtorAmountsAreAllocatedToTheSameAccountsReceivableAccountForReceiptTransaction("8", "", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckAllocationDetailsAreValidAndAvailableCreditorTransactionsCanBeAllocatedForThePayment(string refID, string allocationType, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test22"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check allocation details are valid and available creditor transactions can be all" +
                    "ocated for the payment", @__tags);
#line 475
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table56.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "500.00",
                        "false",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        ""});
#line 476
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table56, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table57.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 479
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table58.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "100.00"});
#line 482
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table59.AddRow(new string[] {
                        "351b9b5f-e941-46a4-9de8-1a53a1235a7a",
                        "2",
                        "10.00"});
            table59.AddRow(new string[] {
                        "649e108f-b63e-4eba-a202-9d27c9beb39a",
                        "7",
                        "20.00"});
            table59.AddRow(new string[] {
                        "c2682b6f-68e2-4574-b114-3a5b4cee4688",
                        "9",
                        "30.00"});
            table59.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "100.00"});
#line 485
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table59, "And ");
#line 491
testRunner.And(string.Format("the debtor/creditor allocation reference ID is \'{0}\'", refID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
testRunner.And(string.Format("the debtor/creditor allocation type is \'{0}\'", allocationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 493
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 495
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check allocation details are valid and available creditor transactions can be all" +
            "ocated for the payment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "58")]
        public virtual void CheckAllocationDetailsAreValidAndAvailableCreditorTransactionsCanBeAllocatedForThePayment_4E310C7B_Ad07_43Cd_A285_2Bc3E4F26A1E()
        {
            this.CheckAllocationDetailsAreValidAndAvailableCreditorTransactionsCanBeAllocatedForThePayment("4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "0", "true", "58", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check allocation details are valid and available creditor transactions can be all" +
            "ocated for the payment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "649e108f-b63e-4eba-a202-9d27c9beb39a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "649e108f-b63e-4eba-a202-9d27c9beb39a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationType", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAllocationDetailsAreValidAndAvailableCreditorTransactionsCanBeAllocatedForThePayment_649E108F_B63E_4Eba_A202_9D27C9Beb39A()
        {
            this.CheckAllocationDetailsAreValidAndAvailableCreditorTransactionsCanBeAllocatedForThePayment("649e108f-b63e-4eba-a202-9d27c9beb39a", "7", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckAnAmountToBeAllocatedToTheCreditorTransactionCanTBeGreaterThanABalanceOwing(string refID, string allocationAmount, string balanceOwing, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test23"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check an amount to be allocated to the creditor transaction can\'t be greater than" +
                    " a balance owing", @__tags);
#line 504
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table60.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "600.00",
                        "false",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        ""});
#line 505
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table60, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table61.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 508
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table62.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "600.00"});
#line 511
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table63.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "10.00"});
#line 514
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table63, "And ");
#line 517
testRunner.And(string.Format("the debtor/creditor allocation reference ID is \'{0}\'", refID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 518
testRunner.And(string.Format("the debtor/creditor allocation amount is \'{0}\'", allocationAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 519
testRunner.And(string.Format("the debtor/creditor balance owing is \'{0}\'", balanceOwing), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 520
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 522
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check an amount to be allocated to the creditor transaction can\'t be greater than" +
            " a balance owing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test23")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationAmount", "600.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BalanceOwing", "500.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "61")]
        public virtual void CheckAnAmountToBeAllocatedToTheCreditorTransactionCanTBeGreaterThanABalanceOwing_Variant0()
        {
            this.CheckAnAmountToBeAllocatedToTheCreditorTransactionCanTBeGreaterThanABalanceOwing("4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "600.00", "500.00", "true", "61", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check an amount to be allocated to the creditor transaction can\'t be greater than" +
            " a balance owing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test23")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationAmount", "300.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BalanceOwing", "300.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckAnAmountToBeAllocatedToTheCreditorTransactionCanTBeGreaterThanABalanceOwing_Variant1()
        {
            this.CheckAnAmountToBeAllocatedToTheCreditorTransactionCanTBeGreaterThanABalanceOwing("4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "300.00", "300.00", "true", "0", ((string[])(null)));
        }
        
        public virtual void CheckACreditorStatusCanBeChangedForTheCreditorTransaction(string refID, string allocationAmount, string balanceOwing, string isSamePayableReceivableAccount, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test23"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check a creditor status can be changed for the creditor transaction", @__tags);
#line 529
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "CashbookID",
                        "PaymentsReceiptsID",
                        "CustomerSupplierID",
                        "BankAccountID",
                        "TransDate",
                        "IsPayment",
                        "Amount",
                        "AllocateFullAmount",
                        "AccountsPayableCategoryID",
                        "AccountsReceivableCategoryID"});
            table64.AddRow(new string[] {
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "78efe31b-2afe-4899-bc87-6a27151994d7",
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "b62b3ec8-d707-48f4-aa06-109c86e1d973",
                        "01/01/2014",
                        "true",
                        "600.00",
                        "false",
                        "4f171d54-bd94-4438-9240-85c4268f317e",
                        ""});
#line 530
testRunner.Given("I have a new payment with the following parameters", ((string)(null)), table64, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerSupplierID",
                        "CashbookID",
                        "Description",
                        "Category",
                        "IsPerson",
                        "IsCustomer",
                        "IsSupplier",
                        "IsEmployee",
                        "IsActive"});
            table65.AddRow(new string[] {
                        "f218dc69-98e2-4b28-9a9b-644be9541d9d",
                        "f50ee246-10b6-49c2-916f-cb54396a039a",
                        "Valid customer/supplier 1",
                        "1",
                        "1",
                        "true",
                        "true",
                        "true",
                        "true"});
#line 533
testRunner.And("the contact is selected from all book contacts", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table66.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "600.00"});
#line 536
testRunner.And("this payment has following debtor/creditor allocations", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "RefID",
                        "AllocationType",
                        "Amount"});
            table67.AddRow(new string[] {
                        "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e",
                        "7",
                        "10.00"});
#line 539
testRunner.And("this payment has the following available debtor/creditor transactions to be alloc" +
                    "ated", ((string)(null)), table67, "And ");
#line 542
testRunner.And(string.Format("the debtor/creditor allocation reference ID is \'{0}\'", refID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 543
testRunner.And(string.Format("the debtor/creditor allocation amount is \'{0}\'", allocationAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
testRunner.And(string.Format("the debtor/creditor balance owing is \'{0}\'", balanceOwing), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
testRunner.And(string.Format("the same accounts payable or receivable account is used for transaction \'{0}\'", isSamePayableReceivableAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 546
testRunner.When("I call the GetSaveTransactionPrecheckErrors method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 547
testRunner.Then(string.Format("The error number \'{0}\' occurs", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a creditor status can be changed for the creditor transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test23")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationAmount", "600.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BalanceOwing", "500.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "61")]
        public virtual void CheckACreditorStatusCanBeChangedForTheCreditorTransaction_Variant0()
        {
            this.CheckACreditorStatusCanBeChangedForTheCreditorTransaction("4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "600.00", "500.00", "true", "61", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check a creditor status can be changed for the creditor transaction")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Payment/Receipt prechecks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Test23")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RefID", "4e310c7b-ad07-43cd-a285-2bc3e4f26a1e")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:AllocationAmount", "300.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:BalanceOwing", "300.00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsSamePayableReceivableAccount", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ExpectedError", "0")]
        public virtual void CheckACreditorStatusCanBeChangedForTheCreditorTransaction_Variant1()
        {
            this.CheckACreditorStatusCanBeChangedForTheCreditorTransaction("4e310c7b-ad07-43cd-a285-2bc3e4f26a1e", "300.00", "300.00", "true", "0", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
